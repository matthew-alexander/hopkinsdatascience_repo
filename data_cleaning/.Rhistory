title: "air_pollution_analysis"
---
title: "air_pollution_analysis"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
---
title: "air_pollution_analysis"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
getwd()
setwd("C:/Users/mda45/OneDrive/Programming/Statistical_Learning/Hopkins_DataScience/hopkinsdatascience_repo/air_pollution")
directory = "specdata"
cat(getwd(), directory)
paste(getwd(), directory, sep = "/")
id = 300
paste(getwd(), directory,id, ".csv", sep = "/")
paste(getwd(), directory,id+ ".csv", sep = "/")
paste(getwd(), directory,cat(id, ".csv"), sep = "/")
paste(getwd(), directory,cat(id, ".csv"), sep = "/")
paste(id, "csv", sep = ".")
filename = paste(id,"csv", sep=".")
file_address = paste(getwd(), directory, filename, sep = "/")
file_address
data = read.csv(file_address)
summary(data)
pollutantmean <-  function(directory, pollutant, id = 1:332){
filename = paste(id,"csv", sep=".")
file_address = paste(getwd(), directory, filename, sep = "/")
data = read.csv(file_address)
mean(data$pollutant, na.rm = removeNA)
}
pollutantmean("specdata", "nitrate", 1)
pollutantmean("specdata", "nitrate", 001)
pollutantmean("specdata", "nitrate", "001")
pollutantmean <-  function(directory, pollutant, id = 1:332){
filename = paste(id,"csv", sep=".")
file_address = paste(getwd(), directory, filename, sep = "/")
data = read.csv(file_address)
mean(data$pollutant, na.rm = TRUE)
}
pollutantmean("specdata", "nitrate", "001")
pollutantmean <-  function(directory, pollutant, id = 1:332){
filename = paste(id,"csv", sep=".")
file_address = paste(getwd(), directory, filename, sep = "/")
data = read.csv(file_address)
mean(data$nitrate, na.rm = TRUE)
}
pollutantmean("specdata", "nitrate", "001")
i=1
filename <- sprintf("%03d.csv", i)
?sprintf
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf = read.csv(path2csv, stringsAsFactors = FALSE)
mydf  <-  read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head()
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran  <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:30
5:20
select(cran, r_arch:country)
select(cran, -r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version =="3.1.1", country =="US")
?Comparison
filter(cran, r_version <="3.0.2", country =="IN")
filter(cran, country =="US " | country == "IN")
filter(cran, country =="US" | country == "IN")
filter(cran, size > 100500)
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
swirl()
library(dplyr)
cran  <- tbl_df(mydf)
rm("mydf")
cran
?group_by
group_by(package)
group_by(cran, package)
by_package <- group_by(cran, package)
by_package
mean(by_package)
summarize(by_package, mean(size))
submit()
submit
submit()
pack_sum
quantile(pack_sum$count, probs = 0,99)
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted  <- arrange(top_counts, desc(count))
View(top_counts)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
filter(cran, unique>465)
filter(pack_sum, unique > 465)
top_unique  <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted  <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
?mutate
submit()
submit()
submit()
submit()
?download.file
survey = download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
survey = download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
getwd(0)
getwd()
setwd("C:/Users/mda45/OneDrive/Programming/Statistical_Learning/Hopkins_DataScience/hopkinsdatascience_repo/data_cleaning")
wd = getwd()
survey = download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", wd)
survey = download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", data.csv)
fileURL = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
destfile = "./survey_data.csv"
survey = download.file(fileURL, destfile)
data = read.csv("survey.csv")
data = read.csv("/data_cleaning/survey.csv")
getwd()
data = read.csv("survey_data.csv")
summary(data$VAL)
table(data$VAL)
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(xlsx)
library(rJava)
library(xlsx)
fileURL2 = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
library(XML)
install.packages("XML")
library(XML)
fileURL2 = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc = xmlTreeParse(fileURL2, useInternal = TRUE)
doc = fread(fileURL2, useInternal = TRUE)
doc = fread(fileURL2)
doc = xmlTreeParse(fileURL2)
fileURL = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
destfile = "./survey_data.csv"
survey = download.file(fileURL, destfile)
data = read.csv("survey_data.csv")
intall.packages("data.table")
install.packages("data.table")
DT = fread("survey_data.csv")
library(data.table)
library(dtplyr)
DT = fread("survey_data.csv")
mean(DT[DT$SEX==1,]$pwgtp15)
mean(DT[DT$SEX==2,]$pwgtp1
mean(DT[DT$SEX==1,]$pwgtp15)
mean(DT[DT$SEX==2,]$pwgtp15)
tapply(DT$pwgtp15,DT$SEX,mean)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
rowMeans(DT)[DT$SEX==1]
rowMeans(DT)[DT$SEX==2]
sapply(split(DT$pwgtp15,DT$SEX),mean)
DT[,mean(pwgtp15),by=SEX]
mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT[DT$SEX==1,]$pwgtp15);mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1])
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT$pwgtp15,by=DT$SEX))
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
install.packages("ggplot2")
install.packages("jpeg")
swirl()
install.packages("jpeg")
swirl()
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot((ppm))
boxplot(ppm)
boxplot(ppm, col = "blue")
